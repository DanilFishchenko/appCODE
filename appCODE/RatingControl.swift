//
//  RatingControl.swift
//  appCODE
//
//  Created by Danil Fishchenko on 28.11.2022.
//

import UIKit
import SwiftUI

@IBDesignable class RatingControl :UIStackView {

    //MARK: Declaration
    var rating = 0 {
        didSet {
            updateButtonSelectionState()
        }
    }
    
    private var ratingButtons = [UIButton]()
    
    @IBInspectable var starSize: CGSize = CGSize(width: 44.0, height: 44.0){
        didSet {
            setupButtons()
        }
    }
    
    @IBInspectable var starCount: Int = 5 {
        didSet {
            setupButtons()
        }
    }
    
    
    //MARK: Init
    override init(frame: CGRect) {
        super .init(frame: frame)
        setupButtons()
    }
    
    required init(coder: NSCoder) {
        super .init(coder: coder)
        setupButtons()
    }
    
    //MARK: Methods
    @objc func ratingButtonTapped(button:UIButton){
        print ("Button Tapped üëç \(ratingButtons.firstIndex(of: button)!)")
        guard let index = ratingButtons.firstIndex(of: button) else { return }
        var selectedRaiting = index + 1
        
        if selectedRaiting == rating{
            rating = 0
        } else {
            rating = selectedRaiting
        }
    }
    
    private func setupButtons() {
        
        //–µ—Å–ª–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å —Ç–æ —É–¥–∞–ª—è–µ–º —ç—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –∏
        for button in ratingButtons {
            removeArrangedSubview(button)
            removeFromSuperview()
        }
        ratingButtons.removeAll()
        
        //–ó–≤–µ–∑–¥—ã
        let bundle = Bundle(for: type(of: self))
        let filledStar = UIImage(named: "filledStar",
                                 in: bundle,
                                 compatibleWith: self.traitCollection)
        
        let emptyStar = UIImage(named: "emptyStar",
                                in: bundle,
                                compatibleWith: self.traitCollection)
        
        let hilitedStar = UIImage(named: "hilitedStar",
                                  in: bundle,
                                  compatibleWith: self.traitCollection)
        
        
        //–°–æ–∑–¥–∞—ë–º 5 –∫–Ω–æ–ø–æ–∫
        for _ in 0..<starCount {
        //–°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É
        let button = UIButton()
        //–ü–æ–∫—Ä–∞—Å–∏—Ç—å –∫–Ω–æ–ø–∫—É
            button.setImage(emptyStar, for: .normal)
            button.setImage(filledStar, for: .selected)
            button.setImage(hilitedStar, for: .highlighted)
            button.setImage(hilitedStar, for: [.highlighted, .selected])
            
        //–ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã
        // –û—Ç–∫—é—á–∏—Ç—å –∞–≤—Ç–æ–∫–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã (–≤–Ω—É—Ç—Ä–∏ —Å—Ç–µ–∫–í—å—é –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –Ω—É–∂–Ω–æ –≤—ã–∫–ª—é—á–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
        button.translatesAutoresizingMaskIntoConstraints = false
        
        //–í—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞ –∫–Ω–æ–ø–∫–∏
        button.heightAnchor.constraint(equalToConstant: starSize.height).isActive = true
        button.widthAnchor.constraint(equalToConstant: starSize.width).isActive = true
        button.addTarget(self, action: #selector(ratingButtonTapped(button:)), for: .touchUpInside)
        
        //–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –Ω–∞ –≤—å—é
        addArrangedSubview(button)
        //–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫
        ratingButtons.append(button)
            
        }
        updateButtonSelectionState()
    }
    
    private func updateButtonSelectionState(){
        for (index, button) in ratingButtons.enumerated(){
            button.isSelected = index < rating
        }
    }
}
